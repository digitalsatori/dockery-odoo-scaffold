### Instructions ###
#
# 1 image: xoelabs/dockery-odoo:ci comes with some cloud tools
#   preinstalled in order to orchestrate reiew-apps and rollouts.
#   If it doesn't fir yout need, you probably know what you're doing.
#
# 2 If you use vendored modules and want to include them in testing,
#   symlink them as indicated in the comments.
#
# 3 If you use gitlab's build in registry, CI_REGISTRY_IMAGE, represents
#   that repo, as given by gitlab. You want to make sure that it's the
#   same as IMAGE in your .env file. They both refer to the same repo.
#   The reason, they are not the same variable is that Job's image: tag
#   is expanded outside of the execution scopet (before_script scope).
#
# 4 Review carfully all VARIABLES, and get familiar with Gitlab-CI variable
#   expension. Especially you want to define sensitive variables in the gitlab
#   repository directly rather than checking them in into your source code.
#
# 5 Ensure test and migration stages use the correct runner image version
#
# TIPP: Jobs tagged with [image-builder] can be run on a worker
#   that is set up with docker-socket binding instead of the dind service.
#   Due to shared docker build context, this can dramatically speed up building
#   jobs. Consider running this runner on a "build bastion" server. Don't use
#   this technique for tests or migration, see:
#   https://gitlab.com/gitlab-org/gitlab-ce/issues/41227#note_122331075
#   TL;DR: It won't share the bind mounted volumes properly.


# Repaclace this with your custom ci image, if needed
image: xoelabs/dockery-odoo:ci
variables:
  GIT_DEPTH: '50'
  GIT_STRATEGY: fetch
  GIT_SUBMODULE_STRATEGY: 'recursive'
  GIT_SSL_NO_VERIFY: "true"
  # When using dind service we need to instruct docker, to talk with the
  # daemon started inside of the service. The daemon is available with
  # a network connection instead of the default /var/run/docker.sock socket.
  #
  # The 'docker' hostname is the alias of the service container as described at
  # https://docs.gitlab.com/ee/ci/docker/using_docker_images.html#accessing-the-services
  #
  # Note that if you're using Kubernetes executor, the variable should be set to
  # tcp://localhost:2375 because of how Kubernetes executor connects services
  # to the job container
  DOCKER_HOST: tcp://docker:2375/
  # When using dind, it's wise to use the overlayfs driver for
  # improved performance.
  DOCKER_DRIVER: overlay2
  CUSTOM_CONFIG: |
    [options]
    db_host = postgres
    db_port = 5432
    db_user = odoo
    db_password = odoo
    dbfilter = ^.*$
services:
  - docker:dind
cache:
  untracked: true
  key: "$CI_JOB_STAGE-$CI_COMMIT_REF_NAME"
stages:
- Test
- Stage
- Release

.tests:
  image:
    # name: ${FROM}:${FROM_VERSION}-${ODOO_VERSION}-devops  # Set in Gitlab UI !!
    name: xoelabs/dockery-odoo:edge-12.0-devops  # Adapt to image manually !!
    entrypoint: [""]
  tags: [image-builder]
  except:
    refs: ['/^hotfix\/.*$/', 'schedules']
  stage: Test
  services:
  - postgres:latest
  artifacts:
    paths:
    - testlogs
    expire_in: 1 week
    when: on_failure
  variables:
    # You can alternatively use an external db connection:
    # Use the CUSTOM_CONFIG variable
    POSTGRES_DB: postgres
    POSTGRES_USER: odoo
    POSTGRES_PASSWORD: "odoo"
  before_script:
  # Set the repo's environment
  - export $(egrep -v '^#' .env | xargs)
  - export ODOO_DB_NAME="OdooTest-${CI_COMMIT_TAG:=${CI_PIPELINE_IID}}"
  - pwd  # Orientation
  - ls -la  # Orientation

  # Prepare the runtime environment and construe addons paths
  - export ODOO_BASEPATH="${CI_PROJECT_DIR}"

  # Cleanup and set the testlogs artifact folder
  - rm -rf "${CI_PROJECT_DIR}/testlogs" || true
  - mkdir -p "${CI_PROJECT_DIR}/testlogs" && touch ${CI_PROJECT_DIR}/testlogs/{initlogs.txt,testlogs.txt}

  # Apply DockeryOdoo patches from the CI runtime image in case checked-in odoo
  # does not already contain it fail gracefully, if it does.
  - /patches /opt/odoo/patches.d || true

  - if [[ -r "${CI_PROJECT_DIR}/.adminpwd" ]]; then export ODOO_ADMINPASSWORD_FILE="${CI_PROJECT_DIR}/.adminpwd"; fi
  - source /entrypoint.d/05-set-appenv-ci.sh
  - source /entrypoint.d/10-set-appenv.sh

  # Apply custom patches in case checked-in odoo
  # does not already contain it fail gracefully, if it does.
  - /patches || true

  # Reset custom config and run with **initlogs** file config
  - echo "${CUSTOM_CONFIG}" > "${ODOO_RC}/01-custom.ini"
  - echo "logfile = ${CI_PROJECT_DIR}/testlogs/initlogs.txt" >> "${ODOO_RC}/01-custom.ini"
  - dodoo init -n "${ODOO_DB_NAME}"

  # Reset custom config and run with **testlogs** file config
  - echo "${CUSTOM_CONFIG}" > "${ODOO_RC}/01-custom.ini"
  - echo "logfile = ${CI_PROJECT_DIR}/testlogs/testlogs.txt" >> "${ODOO_RC}/01-custom.ini"

.builds:
  stage: Release
  tags: [image-builder]
  except:
    refs: ['/^hotfix\/.*$/', 'schedules']
  before_script:
  # Set the repo's environment
  - export $(egrep -v '^#' .env | xargs)
  script:
  - docker login -u gitlab-ci-token -p "${CI_JOB_TOKEN}" "${CI_REGISTRY}"
  - ci-build.sh base "${CI_COMMIT_TAG:=${CI_PIPELINE_IID}}"
  - ci-build.sh devops "${CI_COMMIT_TAG:=${CI_PIPELINE_IID}}"
