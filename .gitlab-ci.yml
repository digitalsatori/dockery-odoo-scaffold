### Instructions ###
#
# 1 image: xoelabs/dockery-odoo:ci comes with some cloud tools
#   preinstalled in order to orchestrate reiew-apps and rollouts.
#   If it doesn't fir yout need, you probably know what you're doing.
#
# 2 If you use vendored modules and want to include them in testing,
#   symlink them as indicated in the comments.
#
# 3 If you use gitlab's build in registry, CI_REGISTRY_IMAGE, represents
#   that repo, as given by gitlab. You want to make sure that it's the
#   same as IMAGE in your .env file. They both refer to the same repo.
#   The reason, they are not the same variable is that Job's image: tag
#   is expanded outside of the execution scopet (before_script scope).
#
# 4 Review carfully all VARIABLES, and get familiar with Gitlab-CI variable
#   expension. Especially you want to define sensitive variables in the gitlab
#   repository directly rather than checking them in into your source code.
#
# 5 Ensure test and migration stages use the correct runner image version
#
# TIPP: Jobs tagged with [image-builder] can be run on a worker
#   that is set up with docker-socket binding instead of the dind service.
#   Due to shared docker build context, this can dramatically speed up building
#   jobs. Consider running this runner on a "build bastion" server. Don't use
#   this technique for tests or migration, see:
#   https://gitlab.com/gitlab-org/gitlab-ce/issues/41227#note_122331075
#   TL;DR: It won't share the bind mounted volumes properly.


# Repaclace this with your custom ci image, if needed
image: xoelabs/dockery-odoo:ci
variables:
  GIT_DEPTH: '50'
  GIT_STRATEGY: fetch
  GIT_SUBMODULE_STRATEGY: 'recursive'
  GIT_SSL_NO_VERIFY: "true"
  # When using dind service we need to instruct docker, to talk with the
  # daemon started inside of the service. The daemon is available with
  # a network connection instead of the default /var/run/docker.sock socket.
  #
  # The 'docker' hostname is the alias of the service container as described at
  # https://docs.gitlab.com/ee/ci/docker/using_docker_images.html#accessing-the-services
  #
  # Note that if you're using Kubernetes executor, the variable should be set to
  # tcp://localhost:2375 because of how Kubernetes executor connects services
  # to the job container
  DOCKER_HOST: tcp://docker:2375/
  # When using dind, it's wise to use the overlayfs driver for
  # improved performance.
  DOCKER_DRIVER: overlay2
  CUSTOM_CONFIG: |
    [options]
    db_host = postgres
    db_port = 5432
    db_user = odoo
    db_password = odoo
services:
  - docker:dind
cache:
  untracked: true
  key: "$CI_JOB_STAGE-$CI_COMMIT_REF_NAME"
stages:
- Test
- Stage
- Release
before_script:
# Set the repo's environment
- export $(egrep -v '^#' .env | xargs)
- echo "${CUSTOM_CONFIG}" > .cfg-custom-ci.ini
- pwd  # Orientation
- ls -la  # Orientation


Test-Diff:
  image:
    name: xoelabs/dockery-odoo:12.0-devops  # Adapt to branch manually !!
    entrypoint: [""]
  only: [branches]
  except: ['/^.*-HOTFIX$/']
  stage: Test
  services:
  - postgres:latest
  artifacts:
    paths:
    - testlogs
    expire_in: 1 week
  variables:
    # You can alternatively use an external db connection:
    # Use the CUSTOM_CONFIG variable
    POSTGRES_DB: postgres
    POSTGRES_USER: odoo
    POSTGRES_PASSWORD: "odoo"
    # Modules configuration
    INCLUDE: YOUR_INTEGRATION_TEST_MODULE
  script:
    - mkdir -p "${CI_PROJECT_DIR}/testlogs"
    - mkdir -p "${ODOO_BASEPATH}"
    - mkdir -p "${ODOO_BASEPATH}/addons"
    - mkdir -p "${ODOO_BASEPATH}/cfg.d"
    - mkdir -p "/run/secrets/"

    - ln -s "${CI_PROJECT_DIR}/vendor/odoo/cc/odoo-bin" "${ODOO_BASEPATH}/odoo-bin"
    - ln -s "${CI_PROJECT_DIR}/vendor/odoo/cc/odoo"     "${ODOO_BASEPATH}/odoo"
    - ln -s "${CI_PROJECT_DIR}/vendor/odoo/cc/addons"   "${ODOO_BASEPATH}/addons/000"
    - ln -s "${CI_PROJECT_DIR}/vendor/odoo/ee"          "${ODOO_BASEPATH}/addons/001"
    - ln -s "${CI_PROJECT_DIR}/src"                     "${ODOO_BASEPATH}/addons/090"
    - ln -s "${CI_PROJECT_DIR}/.cfg-default.ini"        "${ODOO_BASEPATH}/cfg.d/01-default"
    - ln -s "${CI_PROJECT_DIR}/.cfg-custom-ci.ini"      "${ODOO_BASEPATH}/cfg.d/02-custom"
    - |
      if [[ -r "${CI_PROJECT_DIR}/.adminpwd" ]]; then
         ln -s "${CI_PROJECT_DIR}/.adminpwd"     /run/secrets/adminpwd;
      fi

    # Symlink vendored modules
    - ln -s "${CI_PROJECT_DIR}/vendor/it-projects-llc/<MODULEDIR>"  "${ODOO_BASEPATH}/addons/010"
    - ln -s "${CI_PROJECT_DIR}/vendor/xoe-labs/<MODULEDIR>"         "${ODOO_BASEPATH}/addons/020"
    - ln -s "${CI_PROJECT_DIR}/vendor/OCA/<MODULEDIR>"              "${ODOO_BASEPATH}/addons/030"

    # Apply patches in case checked in odoo does not already contain it
    # fail gracefully, if it does.
    - /patches $(pwd)/vendor/odoo/cc || true

    - source /entrypoint.d/10-set-appenv.sh
    - dodoo init -n "OdooTest-${CI_PIPELINE_IID}"
    - |
      dodoo test \
        -d "OdooTest-${CI_PIPELINE_IID}" \
        --git-dir ./.git "origin/${ODOO_VERSION}" \
        -i "${INCLUDE}"

Migrate-Staged-DBs:
  image:
    name: xoelabs/dockery-odoo:12.0-devops  # Adapt to branch manually !!
    entrypoint: [""]
  only: [tags]
  except: ['/^.*-HOTFIX$/']
  stage: Stage
  variables:
    STAGED_DBS: "SPACE SEPARATED LIST OF EXISTING DBS TO STAGE MIGRATION"
    CUSTOM_CONFIG: |
      [options]
      db_host = <postgreshost.tld>
      db_port = 5432
      db_user = odoo
      db_password = <$GITLABCIVARIABLE>
  script:
    - mkdir -p "${CI_PROJECT_DIR}/testlogs"
    - mkdir -p "${ODOO_BASEPATH}"
    - mkdir -p "${ODOO_BASEPATH}/addons"
    - mkdir -p "${ODOO_BASEPATH}/cfg.d"
    - mkdir -p "/run/secrets/"

    - ln -s "${CI_PROJECT_DIR}/vendor/odoo/cc/odoo-bin" "${ODOO_BASEPATH}/odoo-bin"
    - ln -s "${CI_PROJECT_DIR}/vendor/odoo/cc/odoo"     "${ODOO_BASEPATH}/odoo"
    - ln -s "${CI_PROJECT_DIR}/vendor/odoo/cc/addons"   "${ODOO_BASEPATH}/addons/000"
    - ln -s "${CI_PROJECT_DIR}/vendor/odoo/ee"          "${ODOO_BASEPATH}/addons/001"
    - ln -s "${CI_PROJECT_DIR}/src"                     "${ODOO_BASEPATH}/addons/090"
    - ln -s "${CI_PROJECT_DIR}/.cfg-default.ini"        "${ODOO_BASEPATH}/cfg.d/01-default"
    - ln -s "${CI_PROJECT_DIR}/.cfg-custom-ci.ini"      "${ODOO_BASEPATH}/cfg.d/02-custom"
    - |
      if [[ -r "${CI_PROJECT_DIR}/.adminpwd" ]]; then
         ln -s "${CI_PROJECT_DIR}/.adminpwd"     /run/secrets/adminpwd;
      fi

    # Symlink vendored modules
    - ln -s "${CI_PROJECT_DIR}/vendor/it-projects-llc/<MODULEDIR>"  "${ODOO_BASEPATH}/addons/010"
    - ln -s "${CI_PROJECT_DIR}/vendor/xoe-labs/<MODULEDIR>"         "${ODOO_BASEPATH}/addons/020"
    - ln -s "${CI_PROJECT_DIR}/vendor/OCA/<MODULEDIR>"              "${ODOO_BASEPATH}/addons/030"

    # Apply patches in case checked in odoo does not already contain it
    # fail gracefully, if it does.
    - /patches $(pwd)/vendor/odoo/cc || true

    - source /entrypoint.d/10-set-appenv.sh
    - |
        for db in ${STAGED_DBS}; do
          dodoo migrate \
            -d "${db}" \
            -f ./.migration.yml
        done


Build-Twins:
  stage: Release
  only: [branches]
  tags: [image-builder]
  except: ['/^.*-HOTFIX$/']
  script:
    - docker login -u gitlab-ci-token -p "${CI_JOB_TOKEN}" "${CI_REGISTRY}"
    - ci-build.sh base ${CI_PIPELINE_IID}
    - ci-build.sh devops ${CI_PIPELINE_IID}

Release:
  stage: Release
  only: [tags]
  tags: [image-builder]
  script:
    - docker login -u gitlab-ci-token -p "${CI_JOB_TOKEN}" "${CI_REGISTRY}"
    - ci-build.sh base "${CI_COMMIT_TAG}"
    - ci-build.sh devops "${CI_COMMIT_TAG}"
